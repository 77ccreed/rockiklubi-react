{"version":3,"sources":["Components/09.11.2018.jpg","Components/Header.js","Components/Header2.js","Components/Tulemas.js","Components/Tehnika.js","Components/Varasem.js","Components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","Component","Header2","items","src","plakat","altText","caption","TehnikaNimekiri","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","collapse","setState","Button","color","onClick","style","marginBottom","Collapse","isOpen","Card","CardBody","console","log","App","Components_Header","Components_Header2","alt","Tehnika","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","Components_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e4cbba09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/09.11.2018.8481e500.jpg\";","import React, { Component } from 'react';\r\nimport \"./../Css/App.css\";\r\nimport \"./../Css/Header.css\";\r\n\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (    \r\n      <header className=\"App-header\">\r\n        <h1 className=\"display-4 m-3 ml-md-5 text-left\"><span className=\"Header-text2\" >Valga</span> <span className=\"Header-text\">Rockiklubi</span></h1>\r\n      </header>    \r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport \"./../Css/App.css\";\r\nimport \"./../Css/Header2.css\";\r\n\r\n\r\nclass Header2 extends Component {\r\n  render() {\r\n    return (\r\n <section className=\"Header2\">\r\n        <h2 className=\"m-3 ml-md-5 text-left\">Alternatiivklubi, kus propageeritakse elavat muusikat nii kodu kui v√§lismaalt.</h2>\r\n </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header2;","import React, { Component } from 'react';\r\nimport {\r\n  Carousel,\r\n  CarouselItem,\r\n  CarouselControl,\r\n  CarouselIndicators,\r\n  CarouselCaption\r\n} from 'reactstrap';\r\nimport \"./../Css/Tulemas.css\";\r\nimport plakat from './09.11.2018.jpg';\r\n\r\n\r\nconst items = [\r\n\r\n\r\n  {\r\n    src: { plakat }  ,\r\n    altText: 'Slide 1',\r\n    caption: 'Slide 1'\r\n  }\r\n];\r\n\r\nclass UritusedCarousel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { activeIndex: 0 };\r\n    this.next = this.next.bind(this);\r\n    this.previous = this.previous.bind(this);\r\n    this.goToIndex = this.goToIndex.bind(this);\r\n    this.onExiting = this.onExiting.bind(this);\r\n    this.onExited = this.onExited.bind(this);\r\n  }\r\n\r\n  onExiting() {\r\n    this.animating = true;\r\n  }\r\n\r\n  onExited() {\r\n    this.animating = false;\r\n  }\r\n\r\n  next() {\r\n    if (this.animating) return;\r\n    const nextIndex = this.state.activeIndex === items.length - 1 ? 0 : this.state.activeIndex + 1;\r\n    this.setState({ activeIndex: nextIndex });\r\n  }\r\n\r\n  previous() {\r\n    if (this.animating) return;\r\n    const nextIndex = this.state.activeIndex === 0 ? items.length - 1 : this.state.activeIndex - 1;\r\n    this.setState({ activeIndex: nextIndex });\r\n  }\r\n\r\n  goToIndex(newIndex) {\r\n    if (this.animating) return;\r\n    this.setState({ activeIndex: newIndex });\r\n  }\r\n\r\n  render() {\r\n    const { activeIndex } = this.state;\r\n\r\n    const slides = items.map((item) => {\r\n      return (\r\n        <CarouselItem\r\n          className=\"Carousel\"\r\n          onExiting={this.onExiting}\r\n          onExited={this.onExited}\r\n          key={item.src}\r\n        >\r\n          <img src={item.src} alt={item.altText} />\r\n          <CarouselCaption captionText={item.caption} captionHeader={item.caption} />\r\n        </CarouselItem>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Carousel\r\n        activeIndex={activeIndex}\r\n        next={this.next}\r\n        previous={this.previous}\r\n      >\r\n        <CarouselIndicators items={items} activeIndex={activeIndex} onClickHandler={this.goToIndex} />\r\n        {slides}\r\n        <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={this.previous} />\r\n        <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={this.next} />\r\n      </Carousel>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default UritusedCarousel;","import React, { Component } from 'react';\r\nimport { Collapse, Button, CardBody, Card } from 'reactstrap';\r\n\r\nclass TehnikaNimekiri extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = { collapse: false };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({ collapse: !this.state.collapse });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button color=\"primary\" onClick={this.toggle} style={{ marginBottom: '1rem' }}>Toggle</Button>\r\n        <Collapse isOpen={this.state.collapse}>\r\n          <Card>\r\n            <CardBody>\r\n              Anim pariatur cliche reprehenderit,\r\n               enim eiusmod high life accusamus terry richardson ad squid. Nihil\r\n               anim keffiyeh helvetica, craft beer labore wes anderson cred\r\n               nesciunt sapiente ea proident.\r\n            </CardBody>\r\n          </Card>\r\n        </Collapse>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TehnikaNimekiri;","import React from 'react';\r\nimport { UncontrolledCarousel } from 'reactstrap';\r\nimport plakat from './09.11.2018.jpg';\r\n\r\nconsole.log(plakat);\r\n\r\nconst items = [\r\n  {\r\n    src: 'plakat',\r\n    altText: 'Slide 1',\r\n    caption: 'Slide 1',\r\n    header: 'Slide 1 Header'\r\n  }\r\n];\r\n\r\nconst VarasemUritused = () => <UncontrolledCarousel items={items} />;\r\n\r\nexport default VarasemUritused;","import React, { Component } from 'react';\nimport \"./../Css/App.css\";\nimport Header from './Header';\nimport Header2 from './Header2';\nimport UritusedCarousel from './Tulemas';\nimport TehnikaNimekiri from './Tehnika';\nimport VarasemUritused from './Varasem';\nimport plakat from './09.11.2018.jpg';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Header />\n      <main>\n     <Header2 />\n          <figure>\n            <img src={plakat}\n              alt=\"Elephant at sunset\"></img>\n              <figcaption>An elephant at sunset</figcaption>\n</figure>\n          <TehnikaNimekiri />\n       \n      </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Css/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}